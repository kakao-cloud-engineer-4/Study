소프트웨어의 특징 : 상품성, 복잡성, 변경 가능성, 복제성

시스템의 기본 요소 : 입력, 처리, 출력, 제어, 피드백 

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/eeaf5fc1-63d5-40e7-ad37-caf386424a13/37da1e2d-ef47-4e92-9298-7c3bb678255c/Untitled.png)

소프트웨어의 위기 : 개발 비용의 증가, 개발 기간의 지연, 인건비 상승, 유지 보수의 어려움. 

소프트웨어 공학 기본 원칙 : 현대적인 프로그래밍 기술 적용, 신뢰성 상향, 사용의 편리성과 유지 보수, 검증.

재공학 : 개발 시간 비용 감소, 품질 향상, 생산성 향상, 신뢰성 향상, 프로젝트 위험 감소.

유지 보수성 향상이 최우선 목표 

과정 : 분석 (Analysis) → 구성 (Restructuring) → 역공학 (Re-verse Engineering) → 이식 (Migration)

재문서화를 통해서 재공학을 사용. → Preventive Maintenance 

CASE : 소프트웨어 개발을 위한 도구. 신속. 소프트웨어 생명 주기의 전체 단계를 연결. 문서화 및 명세화. 개발 단계의 표준화. 다양한 개발 모형 지원. 

개발 기간 단축 → 비용 절약, 생산성 향상. (문서화 도구)

상위 CASE : 요구 분석 및 설계 단계 지원 (모델 간 모순 검사 기능, 모델 오류 검증 기능, 자료 흐름도 작성 기능)

하위 CASE : 소스 코드 작성, 테스트, 문서화 과정 지원

통합 CASE : 소프트웨어 개발 주기 전체 과정 지원 

SADT : SoftTech, 블록 다이어그램 지원. (국지적 문제에서 제출) 

소프트웨어의 생명 주기 : 타당성 검토 → 개발 계획 → 요구 사항 분석 → 설계 → 구현 → 테스트 → 운용 → 유지 보수 

폭포수 모형 : 선형 순차적. 

나선형 모형 : 반복적 작업 + `위험 분석`. 계획 수립 → 위험 분석 (변동 사항 파악) → 개발 및 검증 → 고객 평가 를 반복. n차 프로토 타입 개발. (시제품) 

하향식 설계 : 메인 기능에서 시작하여 하위 기능으로.

상향식 설계 : 기본적인 컴포넌트 설계 이후 상위 수준으로.

프로토타입 : 견본을 제작. 개선해서 최종으로.

HIPO : 계층적 입력 처리 출력 도구. 가시적 도표, 총체적 다이어그램, 세부적 다이어그램. 하향식 소프트웨어 개발을 위한 문서화 도구. 보고 이해하고 유지보수가 쉬움. 

V-모델 : 폭포수 모형에서 시스템 검증과 테스트 작업을 강조. HIPO에서 테스트를 단위별로 적용. 

![테스트 계획 및 설계 (정적)(검증) ↔ 테스트 수행 동작(확인)](https://prod-files-secure.s3.us-west-2.amazonaws.com/eeaf5fc1-63d5-40e7-ad37-caf386424a13/5ab8e240-d769-469d-9686-89349f979e7b/Untitled.png)

테스트 계획 및 설계 (정적)(검증) ↔ 테스트 수행 동작(확인)

애자일 방법론 : 절차보다 요구사항에 맞는지.

종류 : 익스트림프로그래밍 (XP), 스크럼 (SCRUM), 린 (Lean), DSDM (Dynamic System Development Method, 동적 시스템 개발 방법론), FDD (Feature Driven Development, 기능 중심 개발)
